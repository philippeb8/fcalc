#define YY_CalculatorParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from parser.yy  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define yyparse parserparse
//#define yylex parserlex
#define yyerror parsererror
#define yylval parserlval
#define yychar parserchar
#define yydebug parserdebug
#define YY_USE_CLASS
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

#ifndef PARSER_H
#define PARSER_H

#define yyFlexLexer lexerFlexLexer
#include <FlexLexer.h>

#include <list>
#include <string>
#include <vector>
#include <typeinfo>
#include "type.h"
#include "tuple.h"
#include "normed.h"
#include "calculus.h"
#include "mutable_ptr.h"

using namespace fdi;

typedef mutable_ptr<type> type_p;

struct val
{
	integer l;
	floating d;
        fdi::tuple<char, integer> i;

	union
	{
		char c;
		fmpd ed;
		ufmpn fn;
		bfmpn gn;
		ufmpd fd;
		bfmpd gd;
		tfmpd hd;
		ufmpl fl;
		bfmpl gl;
		bmmpv gm;
		bfmpv gv;

		type * t;
		type_t< fdi::vector<type_p> > * v;
                type_t< std::list< fdi::tuple<type_p, int> > > * s;
	};
};

#define ON symbol = true;

#define OFF symbol = false;

#endif
#define YY_CalculatorParser_INHERIT  : public lexerFlexLexer
#define YY_CalculatorParser_STYPE  val
#define YY_CalculatorParser_LEX_BODY  { return lexerFlexLexer::yylex(); }
#define YY_CalculatorParser_ERROR_BODY  { * yyout << string("Invalid Statement"); }
#define YY_CalculatorParser_CONSTRUCTOR_INIT  : symbol(false)
#define YY_CalculatorParser_MEMBERS  bool symbol; type_t<type_p> config; void state(int s) { yy_start = 1 + 2 * s; }
/* %{ and %header{ and %union, during decl */
#define YY_CalculatorParser_BISON 1

#ifndef YY_CalculatorParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_CalculatorParser_COMPATIBILITY 1
 #else
  #define  YY_CalculatorParser_COMPATIBILITY 0
 #endif
#endif

#if YY_CalculatorParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_CalculatorParser_LTYPE
   #define YY_CalculatorParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_CalculatorParser_STYPE 
   #define YY_CalculatorParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_CalculatorParser_DEBUG
   #define  YY_CalculatorParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_CalculatorParser_USE_GOTO
  #define YY_CalculatorParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_CalculatorParser_USE_GOTO
 #define YY_CalculatorParser_USE_GOTO 0
#endif

#ifndef YY_CalculatorParser_PURE
/*  YY_CalculatorParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */
#define YY_CalculatorParser_PARSE parserparse
#define YY_CalculatorParser_LEX parserlex
#define YY_CalculatorParser_ERROR parsererror
#define YY_CalculatorParser_LVAL parserlval
#define YY_CalculatorParser_CHAR parserchar
#define YY_CalculatorParser_DEBUG parserdebug
/* prefix */
#ifndef YY_CalculatorParser_DEBUG
/* YY_CalculatorParser_DEBUG */
#endif


#ifndef YY_CalculatorParser_LSP_NEEDED
 /* YY_CalculatorParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_CalculatorParser_LSP_NEEDED
#ifndef YY_CalculatorParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_CalculatorParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_CalculatorParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_CalculatorParser_STYPE
#define YY_CalculatorParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_CalculatorParser_PARSE
#define YY_CalculatorParser_PARSE yyparse
#endif
#ifndef YY_CalculatorParser_LEX
#define YY_CalculatorParser_LEX yylex
#endif
#ifndef YY_CalculatorParser_LVAL
#define YY_CalculatorParser_LVAL yylval
#endif
#ifndef YY_CalculatorParser_LLOC
#define YY_CalculatorParser_LLOC yylloc
#endif
#ifndef YY_CalculatorParser_CHAR
#define YY_CalculatorParser_CHAR yychar
#endif
#ifndef YY_CalculatorParser_NERRS
#define YY_CalculatorParser_NERRS yynerrs
#endif
#ifndef YY_CalculatorParser_DEBUG_FLAG
#define YY_CalculatorParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_CalculatorParser_ERROR
#define YY_CalculatorParser_ERROR yyerror
#endif

#ifndef YY_CalculatorParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_CalculatorParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_CalculatorParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_CalculatorParser_PARSE_PARAM
  #define YY_CalculatorParser_PARSE_PARAM void
 #endif
#endif

#if YY_CalculatorParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_CalculatorParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_CalculatorParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_CalculatorParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_CalculatorParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_CalculatorParser_PURE
#  endif
#endif

#ifdef YY_CalculatorParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_CalculatorParser_DEBUG 
#  endif
#endif

#ifndef YY_CalculatorParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_CalculatorParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_CalculatorParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_CalculatorParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */
#define	EOL	258
#define	PI	259
#define	EXP	260
#define	DEGREE	261
#define	FUNCTION1stRESULT	262
#define	IF	263
#define	ELSE	264
#define	FOR	265
#define	WHILE	266
#define	EXIT	267
#define	CHAR	268
#define	INDEX	269
#define	LONG	270
#define	DOUBLE	271
#define	INTEGER	272
#define	FUNCTION0ed	273
#define	FUNCTION1st	274
#define	FUNCTION1stNORMED	275
#define	FUNCTION1stNOT	276
#define	FUNCTION2nd	277
#define	FUNCTION2ndVECTOR	278
#define	FUNCTION2ndNORMED	279
#define	FUNCTION2ndMIXED	280
#define	FUNCTION2ndSHIFT	281
#define	FUNCTION2ndCMP	282
#define	FUNCTION2ndPOSTFIX	283
#define	FUNCTION2ndAND	284
#define	FUNCTION2ndXOR	285
#define	FUNCTION2ndOR	286
#define	FUNCTION2ndMODULO	287
#define	FUNCTION3rd	288
#define	CROSS	289
#define	SCALAR	290
#define	SQUAREROOT	291

 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_CalculatorParser_CLASS
#define YY_CalculatorParser_CLASS CalculatorParser
#endif
#ifndef YY_CalculatorParser_INHERIT
#define YY_CalculatorParser_INHERIT
#endif
#ifndef YY_CalculatorParser_MEMBERS
#define YY_CalculatorParser_MEMBERS 
#endif
#ifndef YY_CalculatorParser_LEX_BODY
#define YY_CalculatorParser_LEX_BODY  
#endif
#ifndef YY_CalculatorParser_ERROR_BODY
#define YY_CalculatorParser_ERROR_BODY  
#endif
#ifndef YY_CalculatorParser_CONSTRUCTOR_PARAM
#define YY_CalculatorParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_CalculatorParser_CONSTRUCTOR_CODE
#define YY_CalculatorParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_CalculatorParser_CONSTRUCTOR_INIT
#define YY_CalculatorParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_CalculatorParser_USE_CONST_TOKEN
#define YY_CalculatorParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_CalculatorParser_USE_CONST_TOKEN != 0
#ifndef YY_CalculatorParser_ENUM_TOKEN
#define YY_CalculatorParser_ENUM_TOKEN yy_CalculatorParser_enum_token
#endif
#endif

class YY_CalculatorParser_CLASS YY_CalculatorParser_INHERIT
{
public: 
#if YY_CalculatorParser_USE_CONST_TOKEN != 0
/* static const int token ... */
static const int EOL;
static const int PI;
static const int EXP;
static const int DEGREE;
static const int FUNCTION1stRESULT;
static const int IF;
static const int ELSE;
static const int FOR;
static const int WHILE;
static const int EXIT;
static const int CHAR;
static const int INDEX;
static const int LONG;
static const int DOUBLE;
static const int INTEGER;
static const int FUNCTION0ed;
static const int FUNCTION1st;
static const int FUNCTION1stNORMED;
static const int FUNCTION1stNOT;
static const int FUNCTION2nd;
static const int FUNCTION2ndVECTOR;
static const int FUNCTION2ndNORMED;
static const int FUNCTION2ndMIXED;
static const int FUNCTION2ndSHIFT;
static const int FUNCTION2ndCMP;
static const int FUNCTION2ndPOSTFIX;
static const int FUNCTION2ndAND;
static const int FUNCTION2ndXOR;
static const int FUNCTION2ndOR;
static const int FUNCTION2ndMODULO;
static const int FUNCTION3rd;
static const int CROSS;
static const int SCALAR;
static const int SQUAREROOT;

 /* decl const */
#else
enum YY_CalculatorParser_ENUM_TOKEN { YY_CalculatorParser_NULL_TOKEN=0
	,EOL=258
	,PI=259
	,EXP=260
	,DEGREE=261
	,FUNCTION1stRESULT=262
	,IF=263
	,ELSE=264
	,FOR=265
	,WHILE=266
	,EXIT=267
	,CHAR=268
	,INDEX=269
	,LONG=270
	,DOUBLE=271
	,INTEGER=272
	,FUNCTION0ed=273
	,FUNCTION1st=274
	,FUNCTION1stNORMED=275
	,FUNCTION1stNOT=276
	,FUNCTION2nd=277
	,FUNCTION2ndVECTOR=278
	,FUNCTION2ndNORMED=279
	,FUNCTION2ndMIXED=280
	,FUNCTION2ndSHIFT=281
	,FUNCTION2ndCMP=282
	,FUNCTION2ndPOSTFIX=283
	,FUNCTION2ndAND=284
	,FUNCTION2ndXOR=285
	,FUNCTION2ndOR=286
	,FUNCTION2ndMODULO=287
	,FUNCTION3rd=288
	,CROSS=289
	,SCALAR=290
	,SQUAREROOT=291

 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_CalculatorParser_PARSE (YY_CalculatorParser_PARSE_PARAM);
 virtual void YY_CalculatorParser_ERROR(char *msg) YY_CalculatorParser_ERROR_BODY;
#ifdef YY_CalculatorParser_PURE
#ifdef YY_CalculatorParser_LSP_NEEDED
 virtual int  YY_CalculatorParser_LEX (YY_CalculatorParser_STYPE *YY_CalculatorParser_LVAL,YY_CalculatorParser_LTYPE *YY_CalculatorParser_LLOC) YY_CalculatorParser_LEX_BODY;
#else
 virtual int  YY_CalculatorParser_LEX (YY_CalculatorParser_STYPE *YY_CalculatorParser_LVAL) YY_CalculatorParser_LEX_BODY;
#endif
#else
 virtual int YY_CalculatorParser_LEX() YY_CalculatorParser_LEX_BODY;
 YY_CalculatorParser_STYPE YY_CalculatorParser_LVAL;
#ifdef YY_CalculatorParser_LSP_NEEDED
 YY_CalculatorParser_LTYPE YY_CalculatorParser_LLOC;
#endif
 int   YY_CalculatorParser_NERRS;
 int    YY_CalculatorParser_CHAR;
#endif
#if YY_CalculatorParser_DEBUG != 0
 int YY_CalculatorParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_CalculatorParser_CLASS(YY_CalculatorParser_CONSTRUCTOR_PARAM);
public:
 YY_CalculatorParser_MEMBERS 
};
/* other declare folow */
#if YY_CalculatorParser_USE_CONST_TOKEN != 0
const int YY_CalculatorParser_CLASS::EOL=258;
const int YY_CalculatorParser_CLASS::PI=259;
const int YY_CalculatorParser_CLASS::EXP=260;
const int YY_CalculatorParser_CLASS::DEGREE=261;
const int YY_CalculatorParser_CLASS::FUNCTION1stRESULT=262;
const int YY_CalculatorParser_CLASS::IF=263;
const int YY_CalculatorParser_CLASS::ELSE=264;
const int YY_CalculatorParser_CLASS::FOR=265;
const int YY_CalculatorParser_CLASS::WHILE=266;
const int YY_CalculatorParser_CLASS::EXIT=267;
const int YY_CalculatorParser_CLASS::CHAR=268;
const int YY_CalculatorParser_CLASS::INDEX=269;
const int YY_CalculatorParser_CLASS::LONG=270;
const int YY_CalculatorParser_CLASS::DOUBLE=271;
const int YY_CalculatorParser_CLASS::INTEGER=272;
const int YY_CalculatorParser_CLASS::FUNCTION0ed=273;
const int YY_CalculatorParser_CLASS::FUNCTION1st=274;
const int YY_CalculatorParser_CLASS::FUNCTION1stNORMED=275;
const int YY_CalculatorParser_CLASS::FUNCTION1stNOT=276;
const int YY_CalculatorParser_CLASS::FUNCTION2nd=277;
const int YY_CalculatorParser_CLASS::FUNCTION2ndVECTOR=278;
const int YY_CalculatorParser_CLASS::FUNCTION2ndNORMED=279;
const int YY_CalculatorParser_CLASS::FUNCTION2ndMIXED=280;
const int YY_CalculatorParser_CLASS::FUNCTION2ndSHIFT=281;
const int YY_CalculatorParser_CLASS::FUNCTION2ndCMP=282;
const int YY_CalculatorParser_CLASS::FUNCTION2ndPOSTFIX=283;
const int YY_CalculatorParser_CLASS::FUNCTION2ndAND=284;
const int YY_CalculatorParser_CLASS::FUNCTION2ndXOR=285;
const int YY_CalculatorParser_CLASS::FUNCTION2ndOR=286;
const int YY_CalculatorParser_CLASS::FUNCTION2ndMODULO=287;
const int YY_CalculatorParser_CLASS::FUNCTION3rd=288;
const int YY_CalculatorParser_CLASS::CROSS=289;
const int YY_CalculatorParser_CLASS::SCALAR=290;
const int YY_CalculatorParser_CLASS::SQUAREROOT=291;

 /* const YY_CalculatorParser_CLASS::token */
#endif
/*apres const  */
YY_CalculatorParser_CLASS::YY_CalculatorParser_CLASS(YY_CalculatorParser_CONSTRUCTOR_PARAM) YY_CalculatorParser_CONSTRUCTOR_INIT
{
#if YY_CalculatorParser_DEBUG != 0
YY_CalculatorParser_DEBUG_FLAG=0;
#endif
YY_CalculatorParser_CONSTRUCTOR_CODE;
};
#endif


#define	YYFINAL		180
#define	YYFLAG		-32768
#define	YYNTBASE	55

#define YYTRANSLATE(x) ((unsigned)(x) <= 291 ? yytranslate[x] : 79)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    44,    54,     2,     2,     2,     2,    53,    47,
    48,    37,    35,    52,    36,     2,    38,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    39,     2,     2,
    34,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    50,     2,    51,    42,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    45,    49,    46,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    40,    41,
    43
};

#if YY_CalculatorParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     7,    10,    14,    20,    28,    34,    44,
    46,    47,    50,    52,    56,    59,    63,    67,    71,    75,
    79,    81,    85,    89,    91,    92,    93,    98,   102,   106,
   110,   114,   118,   119,   123,   125,   127,   128,   133,   134,
   138,   140,   141,   146,   147,   151,   153,   157,   160,   163,
   166,   169,   173,   177,   179,   183,   188,   195,   204,   209,
   214,   221,   228,   235,   237,   239,   245,   249,   256,   263,
   268,   270,   272,   274,   276,   278,   280,   282,   289,   293,
   296,   301
};

static const short yyrhs[] = {    56,
     0,    56,    57,     0,    57,     0,    60,     3,     0,    45,
    56,    46,     0,     8,    47,    58,    48,    57,     0,     8,
    47,    58,    48,    57,     9,    57,     0,    11,    47,    58,
    48,    57,     0,    10,    47,    58,     3,    58,     3,    58,
    48,    57,     0,    12,     0,     0,    59,    60,     0,    61,
     0,    13,    34,    60,     0,    21,    60,     0,    60,    31,
    60,     0,    60,    30,    60,     0,    60,    29,    60,     0,
    60,    27,    60,     0,    60,    26,    60,     0,    62,     0,
    61,    35,    61,     0,    61,    36,    61,     0,    67,     0,
     0,     0,    67,    63,    65,    64,     0,    62,    37,    62,
     0,    62,    38,    62,     0,    62,    41,    62,     0,    62,
    40,    62,     0,    62,    32,    62,     0,     0,    65,    66,
    70,     0,    70,     0,    73,     0,     0,    73,    42,    68,
    67,     0,     0,    43,    69,    67,     0,    74,     0,     0,
    74,    42,    71,    67,     0,     0,    43,    72,    67,     0,
    74,     0,    49,    58,    49,     0,    35,    73,     0,    36,
    73,     0,    74,    44,     0,    13,    28,     0,    47,    58,
    48,     0,    50,    78,    51,     0,    75,     0,    18,    47,
    48,     0,    19,    47,    58,    48,     0,    22,    47,    58,
    52,    58,    48,     0,    33,    47,    58,    52,    58,    52,
    58,    48,     0,     7,    47,    58,    48,     0,    20,    47,
    58,    48,     0,    24,    47,    58,    52,    58,    48,     0,
    23,    47,    58,    52,    58,    48,     0,    25,    47,    58,
    52,    58,    48,     0,    76,     0,    77,     0,    17,    39,
    17,    39,    17,     0,    17,    39,    17,     0,    17,     6,
    17,    53,    17,    54,     0,    17,     6,    17,    53,    16,
    54,     0,    17,     6,    17,    53,     0,    17,     0,    16,
     0,    15,     0,    13,     0,    14,     0,     4,     0,     5,
     0,    78,    52,    58,    45,    17,    46,     0,    78,    52,
    58,     0,    78,    52,     0,    58,    45,    17,    46,     0,
    58,     0
};

#endif

#if (YY_CalculatorParser_DEBUG != 0) || defined(YY_CalculatorParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   164,   171,   176,   184,   188,   193,   198,   203,   208,   213,
   220,   228,   233,   237,   242,   247,   252,   257,   262,   267,
   274,   278,   283,   290,   294,   295,   296,   299,   304,   309,
   314,   319,   326,   327,   330,   337,   341,   343,   346,   348,
   353,   357,   359,   362,   364,   369,   373,   378,   383,   390,
   394,   399,   404,   409,   414,   425,   430,   435,   440,   445,
   450,   455,   460,   467,   477,   482,   493,   504,   515,   526,
   539,   543,   548,   555,   559,   564,   569,   576,   585,   591,
   597,   607
};

static const char * const yytname[] = {   "$","error","$illegal.","EOL","PI",
"EXP","DEGREE","FUNCTION1stRESULT","IF","ELSE","FOR","WHILE","EXIT","CHAR","INDEX",
"LONG","DOUBLE","INTEGER","FUNCTION0ed","FUNCTION1st","FUNCTION1stNORMED","FUNCTION1stNOT",
"FUNCTION2nd","FUNCTION2ndVECTOR","FUNCTION2ndNORMED","FUNCTION2ndMIXED","FUNCTION2ndSHIFT",
"FUNCTION2ndCMP","FUNCTION2ndPOSTFIX","FUNCTION2ndAND","FUNCTION2ndXOR","FUNCTION2ndOR",
"FUNCTION2ndMODULO","FUNCTION3rd","'='","'+'","'-'","'*'","'/'","':'","CROSS",
"SCALAR","'^'","SQUAREROOT","'!'","'{'","'}'","'('","')'","'|'","'['","']'",
"','","'\\''","'\"'","start","statement_list","statement","expression","@1",
"expression_binary","expression_add","expression_mul","@2","@3","expression_poly",
"@4","expression_signed","@5","@6","expression_unsigned","@7","@8","expression_unary",
"expression_factorial","terminal","number","symbol","expression_list",""
};
#endif

static const short yyr1[] = {     0,
    55,    56,    56,    57,    57,    57,    57,    57,    57,    57,
    59,    58,    60,    60,    60,    60,    60,    60,    60,    60,
    61,    61,    61,    62,    63,    64,    62,    62,    62,    62,
    62,    62,    66,    65,    65,    67,    68,    67,    69,    67,
    70,    71,    70,    72,    70,    73,    73,    73,    73,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    75,    75,    75,    75,    75,    75,    75,
    76,    76,    76,    77,    77,    77,    77,    78,    78,    78,
    78,    78
};

static const short yyr2[] = {     0,
     1,     2,     1,     2,     3,     5,     7,     5,     9,     1,
     0,     2,     1,     3,     2,     3,     3,     3,     3,     3,
     1,     3,     3,     1,     0,     0,     4,     3,     3,     3,
     3,     3,     0,     3,     1,     1,     0,     4,     0,     3,
     1,     0,     4,     0,     3,     1,     3,     2,     2,     2,
     2,     3,     3,     1,     3,     4,     6,     8,     4,     4,
     6,     6,     6,     1,     1,     5,     3,     6,     6,     4,
     1,     1,     1,     1,     1,     1,     1,     6,     3,     2,
     4,     1
};

static const short yydefact[] = {     0,
    76,    77,     0,     0,     0,     0,    10,    74,    75,    73,
    72,    71,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    39,     0,    11,    11,    11,     1,     3,
     0,    13,    21,    25,    36,    46,    54,    64,    65,    11,
    11,    11,    11,    51,     0,     0,     0,     0,    11,    11,
    15,    11,    11,    11,    11,    11,    74,    48,    49,     0,
     0,     0,     0,     0,    82,     0,     2,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    37,    50,     0,     0,     0,     0,    14,     0,    67,
    55,     0,     0,     0,     0,     0,     0,     0,    40,     5,
    52,    12,    47,     0,    53,    11,    20,    19,    18,    17,
    16,    22,    23,    32,    28,    29,    31,    30,    44,    33,
    35,    41,     0,    59,     0,    11,     0,    70,     0,    56,
    60,    11,    11,    11,    11,    11,     0,    79,     0,    27,
     0,    42,    38,     6,     0,     8,     0,     0,    66,     0,
     0,     0,     0,     0,    81,     0,    45,    34,     0,     0,
    11,    69,    68,    57,    62,    61,    63,    11,     0,    43,
     7,     0,     0,    78,     0,    58,     9,     0,     0,     0
};

static const short yydefgoto[] = {   178,
    29,    30,    62,    63,    31,    32,    33,    81,   140,   120,
   141,    34,   123,    60,   121,   159,   139,    35,    36,    37,
    38,    39,    66
};

static const short yypact[] = {   217,
-32768,-32768,   -22,   -16,    -4,     4,-32768,   -21,-32768,-32768,
-32768,     0,     8,    18,    22,   264,    28,    34,    40,    46,
    48,   346,   346,-32768,   217,-32768,-32768,-32768,   217,-32768,
    15,     1,    16,    85,    -2,   -23,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   264,    21,    30,    49,-32768,-32768,
    23,-32768,-32768,-32768,-32768,-32768,    35,-32768,-32768,   305,
   170,    51,   264,    45,    56,    27,-32768,-32768,   264,   264,
   264,   264,   264,   305,   305,   305,   305,   305,   305,   305,
   384,-32768,-32768,    55,    57,   101,    65,    41,    66,    79,
-32768,    80,    81,    75,    86,    87,    88,    89,-32768,-32768,
-32768,    41,-32768,   115,-32768,    32,-32768,   117,    23,    -7,
    47,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   121,
-32768,    -9,   305,-32768,   217,-32768,   217,    69,   127,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    99,   104,   305,-32768,
   384,-32768,-32768,   145,   152,-32768,   106,   109,-32768,   116,
   119,   120,   123,   113,-32768,   159,-32768,-32768,   305,   217,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   133,-32768,
-32768,   148,   149,-32768,   217,-32768,-32768,   198,   199,-32768
};

static const short yypgoto[] = {-32768,
   175,   -29,   -26,-32768,   -11,    17,   -68,-32768,-32768,-32768,
-32768,   -57,-32768,-32768,    60,-32768,-32768,    67,   -77,-32768,
-32768,-32768,-32768
};


#define	YYLAST		434


static const short yytable[] = {    67,
    64,    65,    99,   122,    51,    46,    44,   114,   115,   116,
   117,   118,    45,    84,    85,    86,    87,    68,    69,    70,
    83,    71,    92,    93,    40,    94,    95,    96,    97,    98,
    41,    67,   142,    88,    83,    74,    75,    89,    47,    82,
    69,    70,    42,    71,    72,    73,    90,    76,    69,    70,
    43,   102,    77,    78,    48,    79,    80,   107,   108,   109,
   110,   111,    44,   122,    49,   143,    69,    70,    50,    71,
    72,    73,    69,    70,    52,    71,    72,   105,   106,   138,
    53,   157,   -80,   -80,   147,   148,    54,   -24,    58,    59,
   112,   113,    55,   103,    56,   144,    91,   146,   101,   145,
   104,   170,   124,   126,   125,   150,   151,   152,   153,   154,
   -24,   -24,   127,   -24,   -24,   -24,   -24,   129,   128,   -24,
   -24,   -24,   -24,   -26,   -24,   -24,   132,   130,   131,   -24,
   171,   137,   -24,   -24,   172,   -24,   -24,   133,   134,   135,
   136,   173,    69,   149,   155,   177,   -26,   -26,   156,   -26,
   -26,   -26,   -26,   160,   161,   -26,   -26,   -26,   -26,   162,
   -26,   -26,   163,   164,   168,   -26,   165,   166,   -26,   -26,
   167,   -26,   -26,     1,     2,   169,     3,     4,   174,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,   175,   176,   179,   180,    61,
   158,     0,    21,     0,    22,    23,     0,     0,     0,     0,
     0,     0,    24,     0,    25,   100,    26,     0,    27,    28,
     1,     2,     0,     3,     4,     0,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,     0,     0,     0,     0,     0,     0,     0,    21,
     0,    22,    23,     0,     0,     0,     0,     0,     0,    24,
     0,    25,     0,    26,     0,    27,    28,     1,     2,     0,
     3,     0,     0,     0,     0,     0,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,     0,
     0,     0,     0,     0,     0,     0,    21,     0,    22,    23,
     0,     0,     0,     0,     0,     0,    24,     0,     1,     2,
    26,     3,    27,    28,     0,     0,     0,    57,     9,    10,
    11,    12,    13,    14,    15,     0,    17,    18,    19,    20,
     0,     0,     0,     0,     0,     0,     0,    21,     0,    22,
    23,     0,     0,     0,     0,     0,     0,    24,     0,     1,
     2,    26,     3,    27,    28,     0,     0,     0,    57,     9,
    10,    11,    12,    13,    14,    15,     0,    17,    18,    19,
    20,     0,     0,     0,     0,     0,     0,     0,    21,     0,
    22,    23,     0,     0,     0,     0,     0,     1,     2,     0,
     3,     0,    26,     0,    27,    28,    57,     9,    10,    11,
    12,    13,    14,    15,     0,    17,    18,    19,    20,     0,
     0,     0,     0,     0,     0,     0,    21,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   119,     0,     0,     0,
    26,     0,     0,    28
};

static const short yycheck[] = {    29,
    27,    28,    60,    81,    16,     6,    28,    76,    77,    78,
    79,    80,    34,    40,    41,    42,    43,     3,    26,    27,
    44,    29,    49,    50,    47,    52,    53,    54,    55,    56,
    47,    61,    42,    45,    44,    35,    36,    17,    39,    42,
    26,    27,    47,    29,    30,    31,    17,    32,    26,    27,
    47,    63,    37,    38,    47,    40,    41,    69,    70,    71,
    72,    73,    28,   141,    47,   123,    26,    27,    47,    29,
    30,    31,    26,    27,    47,    29,    30,    51,    52,   106,
    47,   139,    51,    52,    16,    17,    47,     3,    22,    23,
    74,    75,    47,    49,    47,   125,    48,   127,    48,   126,
    45,   159,    48,     3,    48,   132,   133,   134,   135,   136,
    26,    27,    48,    29,    30,    31,    32,    39,    53,    35,
    36,    37,    38,     3,    40,    41,    52,    48,    48,    45,
   160,    17,    48,    49,   161,    51,    52,    52,    52,    52,
    52,   168,    26,    17,    46,   175,    26,    27,    45,    29,
    30,    31,    32,     9,     3,    35,    36,    37,    38,    54,
    40,    41,    54,    48,    52,    45,    48,    48,    48,    49,
    48,    51,    52,     4,     5,    17,     7,     8,    46,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    48,    48,     0,     0,    25,
   141,    -1,    33,    -1,    35,    36,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,    45,    46,    47,    -1,    49,    50,
     4,     5,    -1,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
    -1,    35,    36,    -1,    -1,    -1,    -1,    -1,    -1,    43,
    -1,    45,    -1,    47,    -1,    49,    50,     4,     5,    -1,
     7,    -1,    -1,    -1,    -1,    -1,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    35,    36,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,     4,     5,
    47,     7,    49,    50,    -1,    -1,    -1,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    22,    23,    24,    25,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    35,
    36,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,     4,
     5,    47,     7,    49,    50,    -1,    -1,    -1,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    22,    23,    24,
    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
    35,    36,    -1,    -1,    -1,    -1,    -1,     4,     5,    -1,
     7,    -1,    47,    -1,    49,    50,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    22,    23,    24,    25,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,
    47,    -1,    -1,    50
};
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_CalculatorParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_CalculatorParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_CalculatorParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_CalculatorParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_CalculatorParser_CHAR = (token), YY_CalculatorParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_CalculatorParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_CalculatorParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_CalculatorParser_PURE
/* UNPURE */
#define YYLEX           YY_CalculatorParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_CalculatorParser_CHAR;                      /*  the lookahead symbol        */
YY_CalculatorParser_STYPE      YY_CalculatorParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_CalculatorParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_CalculatorParser_LSP_NEEDED
YY_CalculatorParser_LTYPE YY_CalculatorParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_CalculatorParser_LSP_NEEDED
#define YYLEX           YY_CalculatorParser_LEX(&YY_CalculatorParser_LVAL, &YY_CalculatorParser_LLOC)
#else
#define YYLEX           YY_CalculatorParser_LEX(&YY_CalculatorParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_CalculatorParser_DEBUG != 0
int YY_CalculatorParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_CalculatorParser_CLASS::
#endif
     YY_CalculatorParser_PARSE(YY_CalculatorParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_CalculatorParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_CalculatorParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_CalculatorParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_CalculatorParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_CalculatorParser_LSP_NEEDED
  YY_CalculatorParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_CalculatorParser_LTYPE *yyls = yylsa;
  YY_CalculatorParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_CalculatorParser_PURE
  int YY_CalculatorParser_CHAR;
  YY_CalculatorParser_STYPE YY_CalculatorParser_LVAL;
  int YY_CalculatorParser_NERRS;
#ifdef YY_CalculatorParser_LSP_NEEDED
  YY_CalculatorParser_LTYPE YY_CalculatorParser_LLOC;
#endif
#endif

  YY_CalculatorParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_CalculatorParser_DEBUG != 0
  if (YY_CalculatorParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_CalculatorParser_NERRS = 0;
  YY_CalculatorParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_CalculatorParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_CalculatorParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_CalculatorParser_LSP_NEEDED
      YY_CalculatorParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_CalculatorParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_CalculatorParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_CalculatorParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_CalculatorParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_CalculatorParser_LSP_NEEDED
      yyls = (YY_CalculatorParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_CalculatorParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_CalculatorParser_DEBUG != 0
      if (YY_CalculatorParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_CalculatorParser_DEBUG != 0
  if (YY_CalculatorParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_CalculatorParser_CHAR == YYEMPTY)
    {
#if YY_CalculatorParser_DEBUG != 0
      if (YY_CalculatorParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_CalculatorParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_CalculatorParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_CalculatorParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_CalculatorParser_DEBUG != 0
      if (YY_CalculatorParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_CalculatorParser_CHAR);

#if YY_CalculatorParser_DEBUG != 0
      if (YY_CalculatorParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_CalculatorParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_CalculatorParser_CHAR, YY_CalculatorParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_CalculatorParser_DEBUG != 0
  if (YY_CalculatorParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_CalculatorParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_CalculatorParser_CHAR != YYEOF)
    YY_CalculatorParser_CHAR = YYEMPTY;

  *++yyvsp = YY_CalculatorParser_LVAL;
#ifdef YY_CalculatorParser_LSP_NEEDED
  *++yylsp = YY_CalculatorParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_CalculatorParser_DEBUG != 0
  if (YY_CalculatorParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
{
				config.value = yyvsp[0].s;
				YYACCEPT;
			;
    break;}
case 2:
{
				yyval.s = yyvsp[-1].s;
                                yyval.s->value.push_back(fdi::tuple<type_p, int>(yyvsp[0].t, yylineno));
			;
    break;}
case 3:
{
                                yyval.s = new type_t< std::list< fdi::tuple<type_p, int> > >();
                                yyval.s->value.push_back(fdi::tuple<type_p, int>(yyvsp[0].t, yylineno));
			;
    break;}
case 4:
{
				yyval.t = yyvsp[-1].t;
			;
    break;}
case 5:
{
				yyval.t = yyvsp[-1].s;
			;
    break;}
case 6:
{
                                yyval.t = new type_t< fdi::tuple<type_p, type_p, type_p> >(fdi::tuple<type_p, type_p, type_p>(yyvsp[-2].t, yyvsp[0].t, 0));
			;
    break;}
case 7:
{
                                yyval.t = new type_t< fdi::tuple<type_p, type_p, type_p> >(fdi::tuple<type_p, type_p, type_p>(yyvsp[-4].t, yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 8:
{
                                yyval.t = new type_t< fdi::tuple<type_p, type_p, type_p, type_p> >(fdi::tuple<type_p, type_p, type_p, type_p>(0, yyvsp[-2].t, 0, yyvsp[0].t));
			;
    break;}
case 9:
{
                                yyval.t = new type_t< fdi::tuple<type_p, type_p, type_p, type_p> >(fdi::tuple<type_p, type_p, type_p, type_p>(yyvsp[-6].t, yyvsp[-4].t, yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 10:
{
				yyval.t = new type_t<void>();
			;
    break;}
case 11:
{
				if (symbol)
				{
					parsererror(yytext);
					YYABORT;
				}
			;
    break;}
case 12:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 13:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 14:
{
                                yyval.t = new type_t< fdi::tuple<char, type_p> >(fdi::tuple<char, type_p>(yyvsp[-2].c, yyvsp[0].t));
			;
    break;}
case 15:
{
                                yyval.t = new type_t< fdi::tuple<ufmpl, type_p> >(fdi::tuple<ufmpl, type_p>(yyvsp[-1].fl, yyvsp[0].t));
			;
    break;}
case 16:
{
                                yyval.t = new type_t< fdi::tuple<bfmpl, type_p, type_p> >(fdi::tuple<bfmpl, type_p, type_p>(yyvsp[-1].gl, yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 17:
{
                                yyval.t = new type_t< fdi::tuple<bfmpl, type_p, type_p> >(fdi::tuple<bfmpl, type_p, type_p>(yyvsp[-1].gl, yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 18:
{
                                yyval.t = new type_t< fdi::tuple<bfmpl, type_p, type_p> >(fdi::tuple<bfmpl, type_p, type_p>(yyvsp[-1].gl, yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 19:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>(yyvsp[-1].gd, yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 20:
{
                                yyval.t = new type_t< fdi::tuple<bfmpl, type_p, type_p> >(fdi::tuple<bfmpl, type_p, type_p>(yyvsp[-1].gl, yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 21:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 22:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>((bfmpd) & plus<floating>::operator (), yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 23:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>((bfmpd) & minus<floating>::operator (), yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 24:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 25:
{ON;
    break;}
case 26:
{OFF;
    break;}
case 27:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>((bfmpd) & multiplies<floating>::operator (), yyvsp[-3].t, yyvsp[-1].t));
			;
    break;}
case 28:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>((bfmpd) & multiplies<floating>::operator (), yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 29:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>((bfmpd) & divides<floating>::operator (), yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 30:
{
                                yyval.t = new type_t< fdi::tuple<bmmpv, type_p, type_p> >(fdi::tuple<bmmpv, type_p, type_p>((bmmpv) & dot::operator (), yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 31:
{
                                yyval.t = new type_t< fdi::tuple<bfmpv, type_p, type_p> >(fdi::tuple<bfmpv, type_p, type_p>((bfmpv) & cross::operator (), yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 32:
{
                                yyval.t = new type_t< fdi::tuple<bfmpl, type_p, type_p> >(fdi::tuple<bfmpl, type_p, type_p>(yyvsp[-1].gl, yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 33:
{ON;
    break;}
case 34:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>((bfmpd) & multiplies<floating>::operator (), yyvsp[-2].t, yyvsp[0].t));
			;
    break;}
case 35:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 36:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 37:
{OFF;
    break;}
case 38:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>((bfmpd) & binary_cmath_pow::operator (), yyvsp[-3].t, yyvsp[0].t));
			;
    break;}
case 39:
{OFF;
    break;}
case 40:
{
                                yyval.t = new type_t< fdi::tuple<ufmpd, type_p> >(fdi::tuple<ufmpd, type_p>((ufmpd) & unary_cmath_sqrt::operator (), yyvsp[0].t));
			;
    break;}
case 41:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 42:
{OFF;
    break;}
case 43:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>((bfmpd) & binary_cmath_pow::operator (), yyvsp[-3].t, yyvsp[0].t));
			;
    break;}
case 44:
{OFF;
    break;}
case 45:
{
                                yyval.t = new type_t< fdi::tuple<ufmpd, type_p> >(fdi::tuple<ufmpd, type_p>((ufmpd) & unary_cmath_sqrt::operator (), yyvsp[0].t));
			;
    break;}
case 46:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 47:
{
                                yyval.t = new type_t< fdi::tuple<ufmpd, type_p> >(fdi::tuple<ufmpd, type_p>((ufmpd) & unary_cmath_abs::operator (), yyvsp[-1].t));
			;
    break;}
case 48:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 49:
{
                                yyval.t = new type_t< fdi::tuple<ufmpd, type_p> >(fdi::tuple<ufmpd, type_p>((ufmpd) & negate<floating>::operator (), yyvsp[0].t));
			;
    break;}
case 50:
{
                                yyval.t = new type_t< fdi::tuple<ufmpd, type_p> >(fdi::tuple<ufmpd, type_p>((ufmpd) & fac::operator (), yyvsp[-1].t));
			;
    break;}
case 51:
{
                                yyval.t = new type_t< fdi::tuple<char, type_p> >(fdi::tuple<char, type_p>(yyvsp[-1].c, new type_t< fdi::tuple<normed, type_p> >(fdi::tuple<normed, type_p>(normed(), new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>(yyvsp[0].gd, new type_t<char>(yyvsp[-1].c), new type_t<floating>(1)))))));
			;
    break;}
case 52:
{
				yyval.t = yyvsp[-1].t;
			;
    break;}
case 53:
{
				yyval.t = yyvsp[-1].v;
			;
    break;}
case 54:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 55:
{
				if (symbol)
				{
					parsererror(yytext);
					YYABORT;
				}

				yyval.t = new type_t<fmpd>(yyvsp[-2].ed);
			;
    break;}
case 56:
{
                                yyval.t = new type_t< fdi::tuple<ufmpd, type_p> >(fdi::tuple<ufmpd, type_p>(yyvsp[-3].fd, yyvsp[-1].t));
			;
    break;}
case 57:
{
                                yyval.t = new type_t< fdi::tuple<bfmpd, type_p, type_p> >(fdi::tuple<bfmpd, type_p, type_p>(yyvsp[-5].gd, yyvsp[-3].t, yyvsp[-1].t));
			;
    break;}
case 58:
{
                                yyval.t = new type_t< fdi::tuple<tfmpd, type_p, type_p, type_p> >(fdi::tuple<tfmpd, type_p, type_p, type_p>(yyvsp[-7].hd, yyvsp[-5].t, yyvsp[-3].t, yyvsp[-1].t));
			;
    break;}
case 59:
{
                                yyval.t = new type_t< fdi::tuple<normed, type_p> >(fdi::tuple<normed, type_p>(normed(), yyvsp[-1].t));
			;
    break;}
case 60:
{
                                yyval.t = new type_t< fdi::tuple<ufmpn, type_p> >(fdi::tuple<ufmpn, type_p>(yyvsp[-3].fn, yyvsp[-1].t));
			;
    break;}
case 61:
{
                                yyval.t = new type_t< fdi::tuple<bfmpn, type_p, type_p> >(fdi::tuple<bfmpn, type_p, type_p>(yyvsp[-5].gn, yyvsp[-3].t, yyvsp[-1].t));
			;
    break;}
case 62:
{
                                yyval.t = new type_t< fdi::tuple<bmmpv, type_p, type_p> >(fdi::tuple<bmmpv, type_p, type_p>((bmmpv) & dot::operator (), yyvsp[-3].t, yyvsp[-1].t));
			;
    break;}
case 63:
{
                                yyval.t = new type_t< fdi::tuple<bfmpv, type_p, type_p> >(fdi::tuple<bfmpv, type_p, type_p>((bfmpv) & cross::operator (), yyvsp[-3].t, yyvsp[-1].t));
			;
    break;}
case 64:
{
				if (symbol)
				{
					parsererror(yytext);
					YYABORT;
				}

				yyval.t = yyvsp[0].t;
			;
    break;}
case 65:
{
				yyval.t = yyvsp[0].t;
			;
    break;}
case 66:
{
				if (symbol)
				{
					parsererror(yytext);
					YYABORT;
				}

				yyval.t = new type_t<fraction>(fraction(yyvsp[-4].d * yyvsp[0].d + yyvsp[-2].d, yyvsp[0].d));
			;
    break;}
case 67:
{
				if (symbol)
				{
					parsererror(yytext);
					YYABORT;
				}

				yyval.t = new type_t<fraction>(fraction(yyvsp[-2].d, yyvsp[0].d));
			;
    break;}
case 68:
{
				if (symbol)
				{
					parsererror(yytext);
					YYABORT;
				}

				yyval.t = new type_t<floating>(floating(yyvsp[-5].d + yyvsp[-3].d / floating(60.0) + yyvsp[-1].d / floating(3600.0)));
			;
    break;}
case 69:
{
				if (symbol)
				{
					parsererror(yytext);
					YYABORT;
				}

				yyval.t = new type_t<floating>(floating(yyvsp[-5].d + yyvsp[-3].d / floating(60.0) + yyvsp[-1].d / floating(3600.0)));
			;
    break;}
case 70:
{
				if (symbol)
				{
					parsererror(yytext);
					YYABORT;
				}

				yyval.t = new type_t<floating>(floating(yyvsp[-3].d + yyvsp[-1].d / floating(60.0)));
			;
    break;}
case 71:
{
                yyval.t = new type_t<floating>(yyvsp[0].d);
            ;
    break;}
case 72:
{
				yyval.t = new type_t<floating>(yyvsp[0].d);
			;
    break;}
case 73:
{
				yyval.t = new type_t<integer>(yyvsp[0].l);
			;
    break;}
case 74:
{
				yyval.t = new type_t<char>(yyvsp[0].c);
			;
    break;}
case 75:
{
                                yyval.t = new type_t< fdi::tuple<char, integer> >(fdi::tuple<char, integer>(yyvsp[0].i.first, yyvsp[0].i.second));
			;
    break;}
case 76:
{
				yyval.t = new type_t<floating>(floating::_pi);
			;
    break;}
case 77:
{
				yyval.t = new type_t<floating>(floating::_e);
			;
    break;}
case 78:
{
				yyval.v = yyvsp[-5].v;

				for (int i = 0; i < (real const &)(yyvsp[-1].d); ++ i)
				{
					yyval.v->value.push_back(yyvsp[-3].t);
				}
			;
    break;}
case 79:
{
				yyval.v = yyvsp[-2].v;
				yyval.v->value.push_back(yyvsp[0].t);
			;
    break;}
case 80:
{
				yyval.v = yyvsp[-1].v;
				yyval.v->value.push_back(yyval.v->value.back());
			;
    break;}
case 81:
{
				yyval.v = new type_t< fdi::vector<type_p> >();

				for (int i = 0; i < (real const &)(yyvsp[-1].d); ++ i)
				{
					yyval.v->value.push_back(yyvsp[-3].t);
				}
			;
    break;}
case 82:
{
				yyval.v = new type_t< fdi::vector<type_p> >();
				yyval.v->value.push_back(yyvsp[0].t);
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_CalculatorParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_CalculatorParser_DEBUG != 0
  if (YY_CalculatorParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_CalculatorParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_CalculatorParser_LLOC.first_line;
      yylsp->first_column = YY_CalculatorParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_CalculatorParser_NERRS;

#ifdef YY_CalculatorParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_CalculatorParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_CalculatorParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_CalculatorParser_ERROR_VERBOSE */
	YY_CalculatorParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_CalculatorParser_CHAR == YYEOF)
	YYABORT;

#if YY_CalculatorParser_DEBUG != 0
      if (YY_CalculatorParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_CalculatorParser_CHAR, yytname[yychar1]);
#endif

      YY_CalculatorParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_CalculatorParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_CalculatorParser_DEBUG != 0
  if (YY_CalculatorParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_CalculatorParser_DEBUG != 0
  if (YY_CalculatorParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_CalculatorParser_LVAL;
#ifdef YY_CalculatorParser_LSP_NEEDED
  *++yylsp = YY_CalculatorParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

